{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["interface EntityMap {\n  [key: string]: string;\n}\n\n/** Converts BigInt properties of an object to string. Made to use in a bugfix for prisma.io */\nconst sanitize = (obj: any): any => {\n  const safe = JSON.stringify(obj, (_key, value) => {\n    return typeof value === 'bigint' ? value.toString() : value;\n  });\n  return JSON.parse(safe);\n}\n\n/** Escape a string using Salesforce SOSL syntax. */\nconst escapeSoslStr = (str: string): string => {\n  const entityMap: EntityMap = {\n    '?': '\\\\?',\n    '&': '\\\\&',\n    '!': '\\\\!',\n    '^': '\\\\^',\n    '~': '\\\\~',\n    '-': '\\\\-'\n  };\n\n  return String(str).replace(/[?&!^~-]/g, (s) => {\n    return entityMap[s];\n  });\n}\n\n/**\n* Test if var is null of empty.\n* @param {*} tmp\n* @returns {boolean}\n*/\nconst isNullOrEmpty = (tmp: any): boolean => {\n  return (!tmp || 0 === tmp.length);\n}\n\n/**\n* Test if var is undefined.\n* @param {*} tmp\n* @returns {boolean}\n*/\nconst isUndefined = (tmp: any): boolean => {\n  return (typeof (tmp) === 'undefined');\n}\n\n/**\n* Test if variable is numeric.\n* @param {*} n\n* @returns {boolean}\n*/\nconst isNumeric = (n: any): boolean => {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n* Merge arrays.\n* @param {Array} a\n* @param {Array} b\n* @param {string} property (Can be empty string)\n* @returns {Array}\n*/\nconst mergeArrays = (a: any[], b: any[], prop: string): any[] => {\n  let reduced = a.filter(aitem => !b.find(bitem => aitem[prop] === bitem[prop]));\n  return reduced.concat(b);\n}\n\n/**\n* Return value of a URL's query string parameter\n* @param {string} name\n* @param {string|URL} url string or URL object\n* @returns {*} value of name\n*/\nconst getQueryParam = (name: string, url: string | URL): string | null => {\n  if (isNullOrEmpty(url)) return null;\n  name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n  var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n    results = regex.exec(url as string);\n  if (!results) return null;\n  return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n\n/**\n* Return month name\n* @param {number} month\n* @returns {string}\n*/\nconst getMonthName = (month: number): string => {\n  const dd = new Date();\n  dd.setMonth(month - 1);\n  return dd.toLocaleString([], { month: 'long' });\n}\n\n/**\n* Return an array of all the month names.\n* @returns {Array}\n*/\nconst getAllMonthNames = (): string[] => {\n  const dd = new Date();\n  let tmp: string[] = [];\n  for (let index = 1; index <= 12; index++) {\n    dd.setMonth(index - 1);\n    tmp.push(dd.toLocaleString([], { month: 'long' }));\n  }\n  return tmp;\n}\n\n/**\n*\n* @param {*} v String representing date, Date object\n* @returns {string} yyyy-mm-dd formatted date string.\n*/\nconst getDateString = (v: any): string => {\n  if (isNullOrEmpty(v)) {\n    const today = new Date();\n    return `${today.toLocaleDateString('en-us', { year: 'numeric' })}-${today.toLocaleDateString('en-us', { month: '2-digit' })}-${today.toLocaleDateString('en-us', { day: '2-digit' })}`;\n  }\n\n  const dateObj = getDate(v); // Use getDate to convert to Date object\n  return `${dateObj.toLocaleDateString('en-us', { year: 'numeric' })}-${dateObj.toLocaleDateString('en-us', { month: '2-digit' })}-${dateObj.toLocaleDateString('en-us', { day: '2-digit' })}`;\n};\n\n/**\n* Improved version of Date.parse. Takes string or number.\n* @param {*} v representation of date\n* @returns {Date} object\n*/\nconst getDate = (v: any): Date => {\n  let yr, mo, dy;\n\n  switch (typeof (v)) {\n    case 'number':\n      let tmp = v.toString();\n      yr = parseInt(tmp.slice(0, 4), 10);\n      dy = parseInt(tmp.slice(6, 8), 10);\n      mo = parseInt(tmp.slice(4, 6), 10) - 1;\n      return new Date(yr, mo, dy);\n    case 'string':\n      if ((v.indexOf('-') < 0) && (v.indexOf('/') < 0)) {\n        yr = parseInt(v.slice(0, 4), 10);\n        mo = parseInt(v.slice(4, 6), 10) - 1;\n        dy = parseInt(v.slice(6, 8), 10);\n        return new Date(yr, mo, dy);\n      }\n  }\n\n  // If input is a date string or number, this will handle it.\n  // If not, it will return an \"invalid date\" object.\n  return new Date(v);\n}\n\n/**\n* Get an array of the last 5 years, including the current.\n* @returns {Array}\n*/\nconst getYears = (): number[] => {\n  const current = new Date().getFullYear();\n  const base = current - 4;\n  const years: number[] = [];\n\n  for (let indx = base; indx <= current; indx++) {\n    years.push(indx);\n  }\n\n  return years;\n}\n\n/**\n* Make first letter of string propper case.\n* @param {string} d\n* @returns {string}\n*/\nconst properCase = (d: string): string => {\n  return d.charAt(0).toUpperCase() + d.slice(1);\n}\n\n/**\n* Take ISO-8601 formatted date and return yyyy-mm-dd\n* @param {string} v date string formatted as ISO-8601\n* @returns {string}\n*/\nconst getSf2JsDate = (v: string): string | null => {\n  if (isNullOrEmpty(v)) {\n    return null;\n  }\n\n  let dte = Date.parse(v);\n  return new Date(dte).toISOString().split('T')[0];\n}\n\n/**\n* Removes non-alphabet characters.\n* @param {string} str\n* @returns {string}\n*/\nconst stripNonAlpha = (str: string): string => {\n  return str.replace(/[^a-zA-Z ]/g, '');\n}\n\nconst cmbutil = {\n  sanitize,\n  escapeSoslStr,\n  isNullOrEmpty,\n  isUndefined,\n  isNumeric,\n  mergeArrays,\n  getQueryParam,\n  getMonthName,\n  getAllMonthNames,\n  getDateString,\n  getDate,\n  getYears,\n  properCase,\n  getSf2JsDate,\n  stripNonAlpha\n}\n\nexport default cmbutil;\n"],"names":[],"mappings":"AAIA;AACA,MAAM,QAAQ,GAAG,CAAC,GAAQ,KAAS;AACjC,IAAA,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,KAAK,KAAI;AAC/C,QAAA,OAAO,OAAO,KAAK,KAAK,QAAQ,GAAG,KAAK,CAAC,QAAQ,EAAE,GAAG,KAAK;AAC7D,KAAC,CAAC;AACF,IAAA,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;AACzB,CAAC;AAED;AACA,MAAM,aAAa,GAAG,CAAC,GAAW,KAAY;AAC5C,IAAA,MAAM,SAAS,GAAc;AAC3B,QAAA,GAAG,EAAE,KAAK;AACV,QAAA,GAAG,EAAE,KAAK;AACV,QAAA,GAAG,EAAE,KAAK;AACV,QAAA,GAAG,EAAE,KAAK;AACV,QAAA,GAAG,EAAE,KAAK;AACV,QAAA,GAAG,EAAE;KACN;AAED,IAAA,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC,KAAI;AAC5C,QAAA,OAAO,SAAS,CAAC,CAAC,CAAC;AACrB,KAAC,CAAC;AACJ,CAAC;AAED;;;;AAIE;AACF,MAAM,aAAa,GAAG,CAAC,GAAQ,KAAa;IAC1C,QAAQ,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,MAAM;AAClC,CAAC;AAED;;;;AAIE;AACF,MAAM,WAAW,GAAG,CAAC,GAAQ,KAAa;IACxC,QAAQ,QAAQ,GAAG,CAAC,KAAK,WAAW;AACtC,CAAC;AAED;;;;AAIE;AACF,MAAM,SAAS,GAAG,CAAC,CAAM,KAAa;AACpC,IAAA,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC;AAC7C,CAAC;AAED;;;;;;AAME;AACF,MAAM,WAAW,GAAG,CAAC,CAAQ,EAAE,CAAQ,EAAE,IAAY,KAAW;AAC9D,IAAA,IAAI,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;AAC9E,IAAA,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AAC1B,CAAC;AAED;;;;;AAKE;AACF,MAAM,aAAa,GAAG,CAAC,IAAY,EAAE,GAAiB,KAAmB;IACvE,IAAI,aAAa,CAAC,GAAG,CAAC;AAAE,QAAA,OAAO,IAAI;IACnC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC;IACtC,IAAI,KAAK,GAAG,IAAI,MAAM,CAAC,MAAM,GAAG,IAAI,GAAG,mBAAmB,CAAC,EACzD,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,GAAa,CAAC;AACrC,IAAA,IAAI,CAAC,OAAO;AAAE,QAAA,OAAO,IAAI;AACzB,IAAA,OAAO,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AAC3D,CAAC;AAED;;;;AAIE;AACF,MAAM,YAAY,GAAG,CAAC,KAAa,KAAY;AAC7C,IAAA,MAAM,EAAE,GAAG,IAAI,IAAI,EAAE;AACrB,IAAA,EAAE,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC;AACtB,IAAA,OAAO,EAAE,CAAC,cAAc,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;AACjD,CAAC;AAED;;;AAGE;AACF,MAAM,gBAAgB,GAAG,MAAe;AACtC,IAAA,MAAM,EAAE,GAAG,IAAI,IAAI,EAAE;IACrB,IAAI,GAAG,GAAa,EAAE;AACtB,IAAA,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,IAAI,EAAE,EAAE,KAAK,EAAE,EAAE;AACxC,QAAA,EAAE,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC;AACtB,QAAA,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;;AAEpD,IAAA,OAAO,GAAG;AACZ,CAAC;AAED;;;;AAIE;AACF,MAAM,aAAa,GAAG,CAAC,CAAM,KAAY;AACvC,IAAA,IAAI,aAAa,CAAC,CAAC,CAAC,EAAE;AACpB,QAAA,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE;AACxB,QAAA,OAAO,GAAG,KAAK,CAAC,kBAAkB,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAA,CAAA,EAAI,KAAK,CAAC,kBAAkB,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAI,CAAA,EAAA,KAAK,CAAC,kBAAkB,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,EAAE;;IAGxL,MAAM,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;AAC3B,IAAA,OAAO,GAAG,OAAO,CAAC,kBAAkB,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAA,CAAA,EAAI,OAAO,CAAC,kBAAkB,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAI,CAAA,EAAA,OAAO,CAAC,kBAAkB,CAAC,OAAO,EAAE,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,EAAE;AAC9L,CAAC;AAED;;;;AAIE;AACF,MAAM,OAAO,GAAG,CAAC,CAAM,KAAU;AAC/B,IAAA,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE;AAEd,IAAA,QAAQ,QAAQ,CAAC,CAAC;AAChB,QAAA,KAAK,QAAQ;AACX,YAAA,IAAI,GAAG,GAAG,CAAC,CAAC,QAAQ,EAAE;AACtB,YAAA,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;AAClC,YAAA,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;AAClC,YAAA,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC;YACtC,OAAO,IAAI,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;AAC7B,QAAA,KAAK,QAAQ;YACX,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE;AAChD,gBAAA,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;AAChC,gBAAA,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC;AACpC,gBAAA,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;gBAChC,OAAO,IAAI,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;;;;;AAMjC,IAAA,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;AACpB,CAAC;AAED;;;AAGE;AACF,MAAM,QAAQ,GAAG,MAAe;IAC9B,MAAM,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;AACxC,IAAA,MAAM,IAAI,GAAG,OAAO,GAAG,CAAC;IACxB,MAAM,KAAK,GAAa,EAAE;AAE1B,IAAA,KAAK,IAAI,IAAI,GAAG,IAAI,EAAE,IAAI,IAAI,OAAO,EAAE,IAAI,EAAE,EAAE;AAC7C,QAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;;AAGlB,IAAA,OAAO,KAAK;AACd,CAAC;AAED;;;;AAIE;AACF,MAAM,UAAU,GAAG,CAAC,CAAS,KAAY;AACvC,IAAA,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AAC/C,CAAC;AAED;;;;AAIE;AACF,MAAM,YAAY,GAAG,CAAC,CAAS,KAAmB;AAChD,IAAA,IAAI,aAAa,CAAC,CAAC,CAAC,EAAE;AACpB,QAAA,OAAO,IAAI;;IAGb,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AACvB,IAAA,OAAO,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC;AAED;;;;AAIE;AACF,MAAM,aAAa,GAAG,CAAC,GAAW,KAAY;IAC5C,OAAO,GAAG,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC;AACvC,CAAC;AAED,MAAM,OAAO,GAAG;IACd,QAAQ;IACR,aAAa;IACb,aAAa;IACb,WAAW;IACX,SAAS;IACT,WAAW;IACX,aAAa;IACb,YAAY;IACZ,gBAAgB;IAChB,aAAa;IACb,OAAO;IACP,QAAQ;IACR,UAAU;IACV,YAAY;IACZ;;;;;"}